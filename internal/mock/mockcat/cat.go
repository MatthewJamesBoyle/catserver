// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/matthewjamesboyle/catserver/internal/cat (interfaces: FactGetter,ImageGetter,Doer,Servicer)

// Package mockcat is a generated GoMock package.
package mockcat

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cat "github.com/matthewjamesboyle/catserver/internal/cat"
	http "net/http"
	reflect "reflect"
)

// MockFactGetter is a mock of FactGetter interface
type MockFactGetter struct {
	ctrl     *gomock.Controller
	recorder *MockFactGetterMockRecorder
}

// MockFactGetterMockRecorder is the mock recorder for MockFactGetter
type MockFactGetterMockRecorder struct {
	mock *MockFactGetter
}

// NewMockFactGetter creates a new mock instance
func NewMockFactGetter(ctrl *gomock.Controller) *MockFactGetter {
	mock := &MockFactGetter{ctrl: ctrl}
	mock.recorder = &MockFactGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactGetter) EXPECT() *MockFactGetterMockRecorder {
	return m.recorder
}

// GetFact mocks base method
func (m *MockFactGetter) GetFact(arg0 context.Context) (cat.Fact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFact", arg0)
	ret0, _ := ret[0].(cat.Fact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFact indicates an expected call of GetFact
func (mr *MockFactGetterMockRecorder) GetFact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFact", reflect.TypeOf((*MockFactGetter)(nil).GetFact), arg0)
}

// MockImageGetter is a mock of ImageGetter interface
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GetImage mocks base method
func (m *MockImageGetter) GetImage(arg0 context.Context) (cat.ImageURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(cat.ImageURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage
func (mr *MockImageGetterMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageGetter)(nil).GetImage), arg0)
}

// MockDoer is a mock of Doer interface
type MockDoer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerMockRecorder
}

// MockDoerMockRecorder is the mock recorder for MockDoer
type MockDoerMockRecorder struct {
	mock *MockDoer
}

// NewMockDoer creates a new mock instance
func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
	mock := &MockDoer{ctrl: ctrl}
	mock.recorder = &MockDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockDoer) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDoerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoer)(nil).Do), arg0)
}

// MockServicer is a mock of Servicer interface
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// GetImageAndFact mocks base method
func (m *MockServicer) GetImageAndFact(arg0 context.Context) (cat.CatResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAndFact", arg0)
	ret0, _ := ret[0].(cat.CatResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAndFact indicates an expected call of GetImageAndFact
func (mr *MockServicerMockRecorder) GetImageAndFact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAndFact", reflect.TypeOf((*MockServicer)(nil).GetImageAndFact), arg0)
}
